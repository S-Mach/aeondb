= AeonDB
Lance Gatlin <lance.gatlin@gmail.com>
v1,14-Jan-2015

*UNDER CONSTRUCTION*

AeonDB is an experimental, immutable, concurrent, clusterable, embeddable
key-value store with transactions and ACID guarantees. AeonDB reads are
referentially transparent and allow retrieving any past state of any value.

* Data is stored as a replicable time-ordered stream of commit events
* Writing to "now" is non-transactional but thread-safe (see example 1 below)
* Writing to "future" is transactional, idempotent and time-bound. Transaction
must succeed or fail atomically by a user-supplied timestamp [In Progress] (see
example 2 below)
* Use git-style checkout to rebase and copy a portion of the data and make local
changes
* Use git-style merge to replay commits to another LocalDiffMap (see example 3
below)
* Full record of changes can be retrieved per item [In Progress]

AeonDB v0.1 is currently a prototype and does not fulfill all of its proposed
features. v0.1 implements the following features:

* Immutable (v0.1)
* Concurrent (v0.1)
* Embeddable (for Scala only) (v0.1)
* Local transactions ACI(-D) (v0.1)
* Time-ordered commit event stream (v0.1)
* Time-bound transactions (v0.1) [In Progress]
* Full history for any value (v0.1) [In Progress]

Roadmap for planned feature support:

* Clusterable (v0.2)
* Time-bound transactions (v0.2)
* Cluster transactions (v0.2)
* Transactor ACI(+D) (v0.2)
* MQ Replication (Kafka) (v0.2)
* Multiple key-value stores (v0.3)
* Schema and schema-versioning (v0.3)
* Embeddable (for Scala, Java or Python) (v0.4)
* Stand-alone REST interface (v1.0)
* SQL processor (v1.1)
* Datalog processor (v1.2)

.Example 1: Query the past and write to now
----
Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :load consoleImports
Loading consoleImports...
import org.joda.time._
import scala.concurrent._
import s_mach.concurrent._
import net.s_mach.aeondb._
import scala.concurrent.ExecutionContext.Implicits.global
m: net.s_mach.aeondb.Metadata = Metadata(me,None,2015-01-02T21:33:58.373Z)
p: net.s_mach.aeondb.LocalDiffMap[Int,String,Option[String]] = net.s_mach.aeondb.LocalDiffMap@4579d397
t1: org.joda.time.Instant = 2015-01-02T21:33:59.158Z

scala> p.now.toMap.get
res0: Map[Int,String] = Map(1 -> a, 2 -> b)

scala> p.now.find(1).get
res1: Option[String] = Some(a)

scala> p.now.replace(1,"aa").get
res2: Boolean = true

scala> p.now.find(1).get
res3: Option[String] = Some(aa)

scala> p.old(t1).find(1).get
res4: Option[String] = Some(a)

scala> val t2 = Instant.now()
t2: org.joda.time.Instant = 2015-01-02T21:34:53.754Z

scala> p.now.put(3,"c").get
res5: Boolean = true

scala> p.old(t2).find(3).get
res6: Option[String] = None

scala> p.now.find(3).get
res7: Option[String] = Some(c)

scala> p.now.deactivate(1).get
res8: Boolean = true

scala> p.now.find(1).get
res9: Option[String] = None

scala> p.old(t2).find(1).get
res10: Option[String] = Some(aa)

scala> p.now.toMap.get
res11: Map[Int,String] = Map(2 -> b,3 -> c)

scala> p.old(t2).toMap.get
res12: Map[Int,String] = Map(1 -> aa, 2 -> b)

scala> p.old(t1).toMap.get
res13: Map[Int,String] = Map(1 -> a, 2 -> b)

scala>
----

.Example 2: Multi-write transaction in the future
----
[info] Loading global plugins from /home/lgatlin/.sbt/0.13/plugins
[info] Set current project to history (in build file:/home/lgatlin/Code/persistmap/)
> console
[info] Starting scala interpreter...
[info]
Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :load consoleImports
Loading consoleImports...
import org.joda.time._
import scala.concurrent._
import s_mach.concurrent._
import net.s_mach.aeondb._
import scala.concurrent.ExecutionContext.Implicits.global
m: net.s_mach.aeondb.Metadata = Metadata(me,None,2015-01-04T06:00:05.886Z)
p: net.s_mach.aeondb.LocalDiffMap[Int,String,Option[String]] = net.s_mach.aeondb.LocalDiffMap@2e2384bd
t1: org.joda.time.Instant = 2015-01-04T06:00:07.108Z

scala> :paste
// Entering paste mode (ctrl-D to finish)

val f = p.future
val result = {
  for {
    oa <- f.find(1)
    result <- {
      f.replace(1,oa.get + "b")
      f.put(3,"c")
      f.commit()
    }
  } yield result
}


// Exiting paste mode, now interpreting.

f: p.FutureStateEx = FutureStateEx(BaseOldState(Map(1 -> Record(a,1), 2 -> Record(b,1)),Map(),Metadata(me,None,2015-01-04T06:00:05.886Z)))
result: scala.concurrent.Future[Boolean] = scala.concurrent.impl.Promise$DefaultPromise@1c9aa4d4

scala> result.get
res0: Boolean = true

scala> p.now.toMap.get
res1: Map[Int,String] = Map(2 -> b, 1 -> ab, 3 -> c)
----

.Example 3: Git-style operations
----
[info] Starting scala interpreter...
[info]
Welcome to Scala version 2.11.1 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_72).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :load consoleImports
Loading consoleImports...
import org.joda.time._
import scala.concurrent._
import s_mach.concurrent._
import net.s_mach.aeondb._
import scala.concurrent.ExecutionContext.Implicits.global
m: net.s_mach.aeondb.Metadata = Metadata(me,None,2015-01-04T06:02:32.401Z)
p: net.s_mach.aeondb.LocalDiffMap[Int,String,Option[String]] = net.s_mach.aeondb.LocalDiffMap@2c20acdf
t1: org.joda.time.Instant = 2015-01-04T06:02:33.054Z

scala> p.now.put(3,"c").get
res0: Boolean = true

scala> p.now.toMap.get
res1: Map[Int,String] = Map(2 -> b, 1 -> a, 3 -> c)

scala> val p2 = p.now.checkout(_ == 3).get
p2: net.s_mach.aeondb.PersistentMap[Int,String,Option[String]] = net.s_mach.aeondb.LocalDiffMap@33ab4788

scala> p2.now.toMap.get
res2: Map[Int,String] = Map(3 -> c)

scala> p2.now.replace(3,"cc").get
res3: Boolean = true

scala> p2.now.put(4,"d").get
res4: Boolean = true

scala> p2.now.toMap.get
res5: Map[Int,String] = Map(4 -> d, 3 -> cc)

scala> p.now.merge(p2).get
res6: Boolean = true

scala> p.now.toMap.get
res7: Map[Int,String] = Map(2 -> b, 4 -> d, 1 -> a, 3 -> cc)
----
